import{_ as a,c as s,o as e,a3 as i}from"./chunks/framework.B0MEK6n3.js";const D=JSON.parse('{"title":"Docker介绍","description":"","frontmatter":{},"headers":[],"relativePath":"docs/study/docker/Docker介绍.md","filePath":"docs/study/docker/Docker介绍.md"}'),n={name:"docs/study/docker/Docker介绍.md"},l=i(`<h1 id="docker介绍" tabindex="-1">Docker介绍 <a class="header-anchor" href="#docker介绍" aria-label="Permalink to &quot;Docker介绍&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在云计算和微服务架构日益普及的今天，Docker已成为开发者和运维人员手中的瑞士军刀，极大地简化了应用程序的部署和管理流程。本文旨在为初学者提供一份全面的Docker指南，从概念解析到实践操作，带你走进容器技术的奇妙世界。</p><h2 id="docker是什么" tabindex="-1">Docker是什么？ <a class="header-anchor" href="#docker是什么" aria-label="Permalink to &quot;Docker是什么？&quot;">​</a></h2><p>Docker是一种开源的容器化平台，它允许开发者将应用及其依赖、配置打包进轻量级、可移植的容器中，从而实现“一次构建，到处运行”的理想。与传统虚拟机相比，Docker容器共享主机操作系统的核心，因此启动更快、资源利用率更高。</p><h2 id="docker核心概念" tabindex="-1">Docker核心概念 <a class="header-anchor" href="#docker核心概念" aria-label="Permalink to &quot;Docker核心概念&quot;">​</a></h2><h3 id="容器-vs-虚拟机" tabindex="-1">容器 vs. 虚拟机 <a class="header-anchor" href="#容器-vs-虚拟机" aria-label="Permalink to &quot;容器 vs. 虚拟机&quot;">​</a></h3><ul><li><strong>虚拟机</strong>：模拟整个操作系统环境，包括硬件层，资源消耗大。</li><li><strong>Docker容器</strong>：共享主机操作系统，仅打包应用及其依赖，轻量高效。</li></ul><h3 id="docker镜像" tabindex="-1">Docker镜像 <a class="header-anchor" href="#docker镜像" aria-label="Permalink to &quot;Docker镜像&quot;">​</a></h3><p>Docker镜像是创建容器的基础，类似于面向对象编程中的类。镜像包含了运行应用所需的所有依赖、库文件和设置，是静态、只读的。</p><h3 id="docker容器" tabindex="-1">Docker容器 <a class="header-anchor" href="#docker容器" aria-label="Permalink to &quot;Docker容器&quot;">​</a></h3><p>容器是从镜像创建的运行实例，它是动态的、可写的。每个容器都是相互隔离的，拥有自己的文件系统、网络配置、进程空间等。</p><h3 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h3><p>Dockerfile是一个文本文件，用于自动化构建镜像的过程。通过一系列指令，Dockerfile定义了如何从基础镜像开始，一步步安装软件、复制文件、设置环境变量等，最终生成一个可运行的应用镜像。</p><h2 id="docker基本操作" tabindex="-1">Docker基本操作 <a class="header-anchor" href="#docker基本操作" aria-label="Permalink to &quot;Docker基本操作&quot;">​</a></h2><h3 id="安装docker" tabindex="-1">安装Docker <a class="header-anchor" href="#安装docker" aria-label="Permalink to &quot;安装Docker&quot;">​</a></h3><p>首先，访问<a href="https://www.docker.com/" target="_blank" rel="noreferrer">Docker官网</a>，根据你的操作系统下载并安装适合的Docker版本。</p><h3 id="创建docker镜像" tabindex="-1">创建Docker镜像 <a class="header-anchor" href="#创建docker镜像" aria-label="Permalink to &quot;创建Docker镜像&quot;">​</a></h3><ol><li><strong>编写Dockerfile</strong>：</li></ol><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 使用官方Node.js镜像作为基础镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:14-alpine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 复制package.json和package-lock.json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 安装应用依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 复制应用源码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 暴露端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 定义启动命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="2"><li><strong>构建镜像</strong>：</li></ol><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   docker build -t my-node-app .</span></span></code></pre></div><h3 id="运行docker容器" tabindex="-1">运行Docker容器 <a class="header-anchor" href="#运行docker容器" aria-label="Permalink to &quot;运行Docker容器&quot;">​</a></h3><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   docker run -p 3000:3000 --name my-running-app my-node-app</span></span></code></pre></div><p>这条命令将启动一个容器，将宿主机的3000端口映射到容器的3000端口，并给容器命名为my-running-app。</p><h3 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h3><p>Docker Compose让定义和运行多容器应用变得简单。通过一个<code>docker-compose.yml</code>文件，你可以定义整个应用服务的配置，包括网络、卷、依赖关系等。</p><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>Docker的出现，不仅革新了软件开发和部署的流程，还促进了微服务架构的普及。通过本文的介绍，希望能帮助你迈出Docker学习的第一步。随着实践的深入，你会发现Docker在提高开发效率、简化部署流程、促进团队协作等方面的巨大价值。继续探索，享受容器技术带来的便利吧！</p>`,29),r=[l];function o(t,k,h,p,c,d){return e(),s("div",null,r)}const g=a(n,[["render",o]]);export{D as __pageData,g as default};
